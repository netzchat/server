// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/channel.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/netzchat/server/apis/core/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChannelServiceName is the fully-qualified name of the ChannelService service.
	ChannelServiceName = "core.v1.ChannelService"
)

// ChannelServiceClient is a client for the core.v1.ChannelService service.
type ChannelServiceClient interface {
	List(context.Context, *connect_go.Request[v1.ListChannelsRequest]) (*connect_go.Response[v1.ListChannelsResponse], error)
	Get(context.Context, *connect_go.Request[v1.GetChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Create(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Update(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewChannelServiceClient constructs a client for the core.v1.ChannelService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChannelServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChannelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &channelServiceClient{
		list: connect_go.NewClient[v1.ListChannelsRequest, v1.ListChannelsResponse](
			httpClient,
			baseURL+"/core.v1.ChannelService/List",
			opts...,
		),
		get: connect_go.NewClient[v1.GetChannelRequest, v1.Channel](
			httpClient,
			baseURL+"/core.v1.ChannelService/Get",
			opts...,
		),
		create: connect_go.NewClient[v1.CreateChannelRequest, v1.Channel](
			httpClient,
			baseURL+"/core.v1.ChannelService/Create",
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateChannelRequest, v1.Channel](
			httpClient,
			baseURL+"/core.v1.ChannelService/Update",
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteChannelRequest, emptypb.Empty](
			httpClient,
			baseURL+"/core.v1.ChannelService/Delete",
			opts...,
		),
	}
}

// channelServiceClient implements ChannelServiceClient.
type channelServiceClient struct {
	list   *connect_go.Client[v1.ListChannelsRequest, v1.ListChannelsResponse]
	get    *connect_go.Client[v1.GetChannelRequest, v1.Channel]
	create *connect_go.Client[v1.CreateChannelRequest, v1.Channel]
	update *connect_go.Client[v1.UpdateChannelRequest, v1.Channel]
	delete *connect_go.Client[v1.DeleteChannelRequest, emptypb.Empty]
}

// List calls core.v1.ChannelService.List.
func (c *channelServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListChannelsRequest]) (*connect_go.Response[v1.ListChannelsResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls core.v1.ChannelService.Get.
func (c *channelServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls core.v1.ChannelService.Create.
func (c *channelServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls core.v1.ChannelService.Update.
func (c *channelServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls core.v1.ChannelService.Delete.
func (c *channelServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// ChannelServiceHandler is an implementation of the core.v1.ChannelService service.
type ChannelServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.ListChannelsRequest]) (*connect_go.Response[v1.ListChannelsResponse], error)
	Get(context.Context, *connect_go.Request[v1.GetChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Create(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Update(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.Channel], error)
	Delete(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewChannelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChannelServiceHandler(svc ChannelServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.ChannelService/List", connect_go.NewUnaryHandler(
		"/core.v1.ChannelService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/core.v1.ChannelService/Get", connect_go.NewUnaryHandler(
		"/core.v1.ChannelService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/core.v1.ChannelService/Create", connect_go.NewUnaryHandler(
		"/core.v1.ChannelService/Create",
		svc.Create,
		opts...,
	))
	mux.Handle("/core.v1.ChannelService/Update", connect_go.NewUnaryHandler(
		"/core.v1.ChannelService/Update",
		svc.Update,
		opts...,
	))
	mux.Handle("/core.v1.ChannelService/Delete", connect_go.NewUnaryHandler(
		"/core.v1.ChannelService/Delete",
		svc.Delete,
		opts...,
	))
	return "/core.v1.ChannelService/", mux
}

// UnimplementedChannelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChannelServiceHandler struct{}

func (UnimplementedChannelServiceHandler) List(context.Context, *connect_go.Request[v1.ListChannelsRequest]) (*connect_go.Response[v1.ListChannelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.ChannelService.List is not implemented"))
}

func (UnimplementedChannelServiceHandler) Get(context.Context, *connect_go.Request[v1.GetChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.ChannelService.Get is not implemented"))
}

func (UnimplementedChannelServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.ChannelService.Create is not implemented"))
}

func (UnimplementedChannelServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateChannelRequest]) (*connect_go.Response[v1.Channel], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.ChannelService.Update is not implemented"))
}

func (UnimplementedChannelServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteChannelRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.ChannelService.Delete is not implemented"))
}
